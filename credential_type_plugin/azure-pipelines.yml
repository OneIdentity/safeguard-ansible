# Build Safeguard Ansible Credential Type Plugin

trigger:
  branches:
    include: [ main,  release-* ]
  paths:
    include: [credential_type_plugin]
    exclude: [README.md]

pool:
  vmImage: ubuntu-latest

variables:
  version: '0.9.$(Build.BuildId)'
  workingDir: '$(Build.SourcesDirectory)/credential_type_plugin'
  isPrerelease: ${{ true }}
  isReleaseBranch: $[ or( eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release-') ) ]

steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'env | sort'
  displayName: 'Display environment variables'

- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.9

- script: |
    python3 -m pip install --upgrade pip wheel twine
    python3 -m pip install poetry
    export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring
    poetry install
    keyring --disable
  workingDirectory: '$(workingDir)'
  displayName: 'Install build software'

#- script: |
#    poetry version $(build.SourceBranchName)
#  workingDirectory: '$(workingDir)'
#  displayName: Update pyproject.toml to $(build.SourceBranchName)
#  condition: eq(variables.isReleaseBranch, true)

- script: |
    poetry build
  workingDirectory: '$(workingDir)'
  displayName: Build PyPi dist

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(workingDir)'
    Contents: 'dist/*'
    TargetFolder: '$(build.artifactstagingdirectory)'
  displayName: 'Copy dist to artifact staging directory'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'SafeguardCredentialType'
  displayName: 'Publish the artifacts'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'ls $(Build.ArtifactStagingDirectory)'
  displayName: 'List staging directory'

#- script: |
#    python -m pip install --upgrade pip
#    pip install twine
#  displayName: 'Install twine'

# Set pythonUploadServiceConnection: testPypiTania if you want to test a PyPi push
# but not actually push a project to PyPi OneIdentity. See Project Settings->Service Connections.
- task: TwineAuthenticate@1
  displayName: Twine Authenticate
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))
  #condition: and(succeeded(), eq(variables.isReleaseBranch, true), eq(variables.isPrerelease, false))
  inputs:
    pythonUploadServiceConnection: bnichtestpypi

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'cat $(PYPIRC_PATH)'
  displayName: 'Display .pypirc config file'

- script: |
    python3 -m twine upload --verbose --repository SafeguardAnsible --config-file $(PYPIRC_PATH) $(Build.ArtifactStagingDirectory)/dist/*
  displayName: Upload release to PyPi OneIdentity
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))
  #condition: and(succeeded(), eq(variables.isReleaseBranch, true), eq(variables.isPrerelease, false))

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com.SafeguardPipelines'
    repositoryName: 'OneIdentity/Safeguard-ansible'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'release-$(version)'
    title: 'Safeguard Credential Type $(version)'
    isPreRelease: $(isPrerelease)
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
    assets: |
      $(Build.ArtifactStagingDirectory)/dist/*
  displayName: 'Creating and publishing a release to Github'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true), eq(variables.isPrerelease, false))
